{%- comment -%} /sections/collection.liquid {%- endcomment -%}

{%- liquid
  assign carousel = false
  assign collection_count = collection.all_products_count
  assign filter_mode = section.settings.filter_mode
  assign filter_by_tags = false
  assign enable_filters = section.settings.enable_filters
  assign filters_layout = section.settings.filters_layout
  assign show_more = section.settings.show_more

  assign columns_mobile = settings.products_per_row_on_mobile | plus: 0

  case columns_mobile
    when 1
      assign size_mobile = 'mobile--one-whole'
    when 2
      assign size_mobile = 'mobile--one-half'
  endcase

  if enable_filters
    if filter_mode == 'tag' or filter_mode == 'group'
      assign filter_by_tags = true
    endif
  endif

  if enable_filters and filter_by_tags
    for tag in current_tags
      unless tag contains '_badge' and tag contains '_preorder'
        assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle
        assign selected_tags = selected_tags | append: current_tag_handle
        unless forloop.last
          assign selected_tags = selected_tags | append: '+'
        endunless
      endunless
    endfor
  endif

  assign columns = settings.products_per_row_on_desktop | plus: 0
  assign enable_sorting = section.settings.enable_sorting
  assign enable_infinity_scroll = settings.enable_infinity_scroll
  assign pagination_limit = columns | times: 12
  assign show_breadcrumbs = section.settings.show_breadcrumbs
  assign bg_color = section.settings.bg_color
  assign products_count = 'products.general.products_with_count' | t: count: collection.products_count

  assign section_class = 'collection collection-items section-padding'
  if enable_filters == false and enable_sorting == false
    assign section_class = section_class | append: ' collection--filters-sorting-disabled'
  else
    if enable_filters == false
      assign section_class = section_class | append: ' collection--filters-disabled'
    elsif enable_sorting == false
      assign section_class = section_class | append: ' collection--sorting-disabled'
    endif
  endif

  unless show_breadcrumbs
    assign section_class = section_class | append: ' collection--breadcrumbs-disabled'
  endunless

  assign id = 'Collection--' | append: section.id
  assign selector_id = '#' | append: id
  assign animations_enabled = settings.animations_enabled
  assign animation_anchor = selector_id
  assign animation_delay = 150
  assign min_sticky_bar_gutter = 40
-%}

{%- style -%}
  :root {
    --filter-panel-width: 350px;
    --filter-panel-transition: transform 0.3s ease-in-out;
    {%- if show_breadcrumbs or enable_sorting or enable_filters -%}
      --collection-sticky-bar-height: calc(.75rem * var(--FONT-ADJUST-BODY) + {{ min_sticky_bar_gutter }}px);
    {%- endif -%}
  }

  {{ selector_id }} {
    --PT: {{ section.settings.padding_top }}px;
    --PB: {{ section.settings.padding_bottom }}px;
  }

  {%- if bg_color != 'rgba(0,0,0,0)' and bg_color != '' -%}
    .template-collection .collection-section {
      background-color: {{ bg_color }};
    }
    .filter-panel {
      --bg: {{ bg_color }};
    }
  {%- endif -%}

  /* Filter Panel Overlay */
  .filter-panel-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .filter-panel-overlay.is-open {
    opacity: 1;
    visibility: visible;
  }

  /* Filter Panel */
  .filter-panel {
    position: fixed;
    top: 0;
    left: 0;
    width: var(--filter-panel-width);
    height: 100vh;
    background: var(--bg, #ffffff);
    z-index: 1000;
    transform: translateX(-100%);
    transition: var(--filter-panel-transition);
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
  }

  .filter-panel.is-open {
    transform: translateX(0);
  }

  /* Filter Panel Header */
  .filter-panel__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px 24px;
    border-bottom: 1px solid #e5e5e5;
    background: #f8f9fa;
    flex-shrink: 0;
  }

  .filter-panel__title {
    font-size: 20px;
    font-weight: 600;
    margin: 0;
    color: #333;
  }

  .filter-panel__close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .filter-panel__close:hover {
    background-color: #e9ecef;
  }

  .filter-panel__close svg {
    width: 20px;
    height: 20px;
  }

  /* Filter Panel Content */
  .filter-panel__content {
    flex: 1;
    overflow-y: auto;
    padding: 24px;
  }

  /* Filter Buttons in Top Bar */
  .filters-trigger-btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: #fff;
    border: 1px solid #333;
    padding: 12px 20px;
    border-radius: 0;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    font-weight: 400;
    color: #333;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .filters-trigger-btn:hover {
    background: #333;
    color: #fff;
    border-color: #333;
  }

  .filters-trigger-btn svg {
    width: 16px;
    height: 16px;
  }

  /* Sort By Button Styling */
  .collection__sort__label {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: #fff;
    border: 1px solid #333;
    padding: 12px 20px;
    border-radius: 0;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    font-weight: 400;
    color: #333;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .collection__sort__label:hover {
    background: #333;
    color: #fff;
    border-color: #333;
  }

  .collection__sort__label svg {
    width: 16px;
    height: 16px;
  }

  /* Clear Filters */
  .clear-filters {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e5e5e5;
  }

  .clear-filters__btn {
    width: 100%;
    background: #6c757d;
    color: white;
    border: none;
    padding: 12px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-decoration: none;
    display: block;
    text-align: center;
  }

  .clear-filters__btn:hover {
    background: #5a6268;
    text-decoration: none;
    color: white;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .filter-panel {
      width: 85vw;
      max-width: 320px;
    }
  }

  /* Body scroll lock when panel is open */
  body.filter-panel-open {
    overflow: hidden;
  }

  /* Product Grid Layout - Full Width */
  .collection__products {
    width: 100%;
  }

  .collection__products .grid {
    display: grid;
    gap: 20px;
    width: 100%;
  }

  /* 4 Column Layout - Full Width */
  .collection-items--4 .grid {
    grid-template-columns: repeat(4, 1fr);
  }

  /* 3 Column Layout - Full Width */
  .collection-items--3 .grid {
    grid-template-columns: repeat(3, 1fr);
  }

  /* 2 Column Layout - Full Width */
  .collection-items--2 .grid {
    grid-template-columns: repeat(2, 1fr);
  }

  /* 1 Column Layout - Full Width */
  .collection-items--1 .grid {
    grid-template-columns: 1fr;
  }

  /* Ensure product items take full width of their grid cell */
  .grid__item {
    width: 100%;
    max-width: none;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .collection-items--mobile--one-half .grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .collection-items--mobile--one-whole .grid {
      grid-template-columns: 1fr;
    }
  }
{%- endstyle -%}

<div
  id="{{ id }}"
  class="{{ section_class }}"
  data-section-type="collection-template"
  data-section-id="{{ section.id }}"
  data-enable-filters="{{ enable_filters }}"
  data-enable-sorting="{{ enable_sorting }}"
  data-filters-default-state="{{ filters_layout }}"
  data-collapsible-transition-override
  data-filter-mode="{{ filter_mode }}"
  {% if filter_by_tags %}
    data-collection="{{ collection.url | default: routes.all_products_collection_url }}"
    data-tags="{{ selected_tags }}"
  {% endif %}
>
  <div class="collection__wrapper" data-collection-wrapper>
    <div class="wrapper--full-padded">
      <div class="collection__inner">
        {%- if show_breadcrumbs or enable_filters or enable_sorting -%}
          {%- comment -%} First Line: Breadcrumbs Only {%- endcomment -%}
          {%- if show_breadcrumbs -%}
            <div
              style="margin-bottom: 20px;"
              {% if animations_enabled %}
                data-aos="fade"
                data-aos-anchor="{{ animation_anchor }}"
                data-aos-delay="{{ animation_delay }}"
                {%- assign animation_delay = animation_delay | plus: 150 -%}
              {% endif %}
            >
              {%- render 'breadcrumbs' -%}
            </div>
          {%- endif -%}

          {%- comment -%} Second Line: Control Elements {%- endcomment -%}
          <div
            id="CollectionStickyBar"
            class="collection__sticky-bar"
            data-collection-sticky-bar
            style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px;"
            {% if animations_enabled %}
              data-aos="fade"
              data-aos-anchor="{{ animation_anchor }}"
              data-aos-delay="{{ animation_delay }}"
              {%- assign animation_delay = animation_delay | plus: 150 -%}
            {% endif %}
          >
            <div style="display: flex; align-items: center; gap: 20px;">
              {%- if enable_filters -%}
                <button class="filters-trigger-btn" data-open-filters>
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                  </svg>
                  {{ 'products.general.filters' | t }}
                </button>
              {%- endif -%}

              {%- if enable_sorting -%}
                {%- assign sort_by = search.sort_by
                  | default: collection.sort_by
                  | default: collection.default_sort_by
                -%}
                {%- assign sort_options = search.sort_options | default: collection.sort_options -%}

                <div class="collection__sort-bar">
                  <button type="button" class="collection__sort__label" data-sort-toggle>
                    {{ 'collections.sorting.title' | t }}
                    {%- render 'icon-select' -%}
                  </button>

                  <div class="collection__sort__option-wrapper" data-collection-sort-options>
                    <div class="collection__sort__options">
                      <ul
                        class="collection__filter-tags collection__filter-tags--default"
                        collection-sort-by="{{ sort_by }}"
                      >
                        {%- for option in sort_options -%}
                          <li class="collection__filter-tag">
                            <input
                              class="collection__sort__input"
                              type="radio"
                              name="sort_by_bar"
                              value="{{ option.value }}"
                              id="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                              data-input-sort
                              {% if option.value == sort_by %}
                                checked
                              {% endif %}
                            >
                            <label
                              class="collection__sort__button"
                              for="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                              tabindex="0"
                            >
                              {{- option.name -}}
                            </label>
                          </li>
                        {%- endfor -%}
                      </ul>

                      <noscript>
                        <button type="submit" class="btn btn--primary btn--solid">
                          {{ 'collection.filters.sort_button' | t }}
                        </button>
                      </noscript>
                    </div>
                  </div>
                </div>
              {%- endif -%}
            </div>

            <div
              class="collection__products-count"
              data-products-count="{{ products_count }}"
              style="font-size: 14px; color: #666;"
            >
              {{- products_count -}}
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} Slide-in Filter Panel {%- endcomment -%}
        {%- if enable_filters -%}
          {%- liquid
            assign filters_available = false
            assign filter_count = 0
            assign all_active_tags_count = 0

            capture sort_param
              if collection.sort_by != collection.default_sort_by
                assign sort_parameter = '/?'
                if collection.current_type or collection.current_vendor
                  assign sort_parameter = '&'
                endif
                echo sort_parameter | append: 'sort_by=' | append: collection.sort_by
              endif
            endcapture
          -%}

          {%- comment -%} Filter Panel Overlay {%- endcomment -%}
          <div class="filter-panel-overlay" data-filter-overlay></div>

          {%- comment -%} Filter Panel {%- endcomment -%}
          <div class="filter-panel" data-filter-panel>
            <div class="filter-panel__header">
              <h3 class="filter-panel__title">{{ 'products.general.filters' | t }}</h3>
              <button class="filter-panel__close" data-close-filters aria-label="{{ 'products.general.close' | t }}">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>

            <div class="filter-panel__content">
              <form data-collection-filters-form>
                {% if collection.current_type %}
                  <input type="hidden" name="q" value="{{ collection.current_type }}">
                {% endif %}
                {% if collection.current_vendor %}
                  <input type="hidden" name="q" value="{{ collection.current_vendor }}">
                {% endif %}

                {%- capture filters -%}
                  {%- case filter_mode -%}
                    {%- when 'default' -%}
                      {%- liquid
                        if collection.filters != empty
                          assign filters_available = true
                        endif

                        for filter in collection.filters
                          render 'filter', filter: filter, animation_delay: animation_delay, filters_layout: filters_layout, index: forloop.index, show_more: show_more
                        endfor
                      -%}

                      <noscript>
                        <button type="submit" class="btn btn--primary btn--solid">{{ 'collection.filters.filter_button' | t }}</button>
                      </noscript>

                    {%- when 'tag' -%}
                      {%- liquid
                        assign is_active = false
                        assign active_count = 0
                        assign active_tag_filters = ''
                        assign tags_list = ''
                        assign filters_counter = 0
                        assign filters_markup_first_part = ''
                        assign filters_markup_the_rest = ''
                        assign show_more_active_filters_counter = 0
                        assign count_threshold = 10

                        for tag in collection.all_tags
                          assign filters_available = true
                          unless tag contains '_badge' or tag contains '_preorder'
                            if current_tags contains tag
                              assign is_active = true
                              assign active_count = active_count | plus: 1
                              assign all_active_tags_count = all_active_tags_count | plus: 1
                            endif
                          endunless
                        endfor

                        assign toggle_state = true

                        if filters_layout == 'closed'
                          assign toggle_state = false
                        endif

                        if is_active
                          assign toggle_state = true
                        endif

                        capture filters_list_class
                          echo 'collection__filter-tags'
                        endcapture
                      -%}

                      <div class="collection__filter"{% if show_more %} data-show-more{% endif %} data-collection-filter>
                        <button type="button" class="collection__filter__title label-typography{% if toggle_state %} is-expanded{% endif %}"
                          aria-expanded="{{ toggle_state }}"
                          aria-controls="CollectionFilter--tags"
                          data-filter-active="{{ is_active }}"
                          data-collapsible-trigger>

                          {{- 'products.general.filter_by' | t -}}

                          <span class="collection__filter__count">
                            {%- render 'icon-toggle-plus' -%}
                            {%- render 'icon-toggle-minus' -%}
                          </span>
                        </button>

                        <div id="CollectionFilter--tags"
                          class="collection__filter-tags-wrapper{% if toggle_state %} is-expanded{% endif %}"
                          aria-expanded="{% if toggle_state %}true{% else %}false{% endif %}"
                          data-collapsible-container
                          {% if toggle_state %}style="height:auto;"{% endif %}>
                          <ul class="{{ filters_list_class }}" data-collapsible-content>
                            {%- for tag in collection.all_tags -%}
                              {%- unless tags_list contains tag or tag contains '_badge' or tag contains '_preorder' -%}
                                {%- capture temp_list -%}{{ tags_list | append: tag | append: ' ' }}{%- endcapture -%}
                                {%- liquid
                                  assign tags_list = temp_list
                                  assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle

                                  if current_tags contains tag
                                    assign linked_tags = selected_tags | remove: current_tag_handle
                                    assign filter_count = filter_count | plus: 1
                                  else
                                    assign linked_tags = selected_tags | append: '+' | append: current_tag_handle
                                  endif

                                  capture tag_link
                                    echo collection.url
                                    if linked_tags != blank
                                      echo '/' | append: linked_tags
                                    endif
                                    echo sort_param
                                  endcapture

                                  assign tag_link = tag_link | replace: '/+', '/' | replace: '++', '+' | replace: '+?', '?'

                                  capture filter_classes
                                    echo 'collection__filter-tag collection__filter-tag--default'
                                    if current_tags contains tag
                                      echo ' is-active'
                                    endif
                                  endcapture
                                -%}

                                {%- capture current_filter -%}
                                  <li class="{{ filter_classes }}" data-collection-filter-tag>
                                    <a href="{{ tag_link }}"
                                      class="filter__button"
                                      data-tag="{{ tag | handleize }}"
                                      data-collection-filter-tag-button>
                                      {{ tag }}
                                    </a>
                                  </li>
                                {%- endcapture -%}

                                {%- liquid
                                  assign filters_counter = filters_counter | plus: 1
                                  if filters_counter <= count_threshold
                                    assign filters_markup_first_part = filters_markup_first_part | append: current_filter
                                  else
                                    assign filters_markup_the_rest = filters_markup_the_rest | append: current_filter
                                    if current_tags contains tag
                                      assign show_more_active_filters_counter = show_more_active_filters_counter | plus: 1
                                    endif
                                  endif
                                -%}

                                {%- if current_tags contains tag -%}
                                  {%- capture active_tag_filters -%}
                                    {{- active_tag_filters -}}
                                    <a class="filter__active__remove" href="{{ tag_link }}" data-tag="{{ tag | handleize }}" data-filter-tag-reset-button>
                                      {{ tag }}
                                      <span class="filter__x">✕</span>
                                    </a>
                                  {%- endcapture -%}
                                {%- endif -%}
                              {%- endunless -%}
                            {%- endfor -%}

                            {%- if show_more -%}
                              {{- filters_markup_first_part -}}

                              {%- if filters_markup_the_rest != '' -%}
                                {%- liquid
                                  assign open_show_more = false
                                  if show_more_active_filters_counter > 0
                                    assign open_show_more = true
                                  endif
                                -%}
                                <li class="collection__filter-actions" data-show-more-actions>
                                  <div id="CollectionFilterActions--tags"
                                    class="collection__filter-actions-container{% if open_show_more %} is-expanded{% endif %}"
                                    data-collapsible-container
                                    data-show-more-container
                                    aria-expanded="{{ open_show_more }}"
                                    {% if open_show_more %} style="height:auto;"{% endif %}>
                                    <ul class="{{ filters_list_class }}" data-collapsible-content>
                                      {{- filters_markup_the_rest -}}
                                    </ul>
                                  </div>

                                  <button type="button"
                                    class="collection__filters-more btn btn--text{% if open_show_more %} is-expanded{% endif %}"
                                    aria-expanded="{{ open_show_more }}"
                                    aria-controls="CollectionFilterActions--tags"
                                    data-collapsible-trigger
                                    data-show-more-trigger>
                                    <span>{{ 'collection.filters.show_more' | t }}</span>
                                    <span>{{ 'collection.filters.show_less' | t }}</span>
                                  </button>
                                </li>
                              {%- endif -%}

                            {%- else -%}
                             {{- filters_markup_first_part -}}
                             {{- filters_markup_the_rest -}}
                            {%- endif -%}
                          </ul>
                        </div>
                      </div>

                    {%- when 'group' -%}
                      {%- liquid
                        assign groups = ''
                        assign active_tag_filters = ''

                        for tag in collection.all_tags
                          assign tag_parts = tag | split: '_'

                          if tag_parts.size == 2
                            assign groups = groups | append: tag_parts.first | append: ','
                          endif
                        endfor

                        assign groups = groups | split: ',' | compact | uniq
                        assign color_label = 'color,colour,couleur,colore,farbe,색,色,färg,farve' | split: ','

                        comment
                          These tags will be hidden from the Filters
                        endcomment
                        assign special_tags = '_preorder,_badge' | split: ','
                      -%}

                      {%- for group in groups -%}
                        {%- liquid
                          assign filters_counter = 0
                          assign filters_markup_first_part = ''
                          assign filters_markup_the_rest = ''
                          assign show_more_active_filters_counter = 0
                          assign is_active = false
                          assign active_count = 0
                          assign group_label = group | downcase
                          assign group_with_suffix = group | append: '_'

                          comment
                            group_with_suffix is needed in order to avoid edge cases where group tags contain the same words
                            For example:
                            Color_Metalic
                            Metalic_Yes
                          endcomment
                        -%}

                        {%- comment -%} Don't show "_badge" and "_preorder" as filters {%- endcomment -%}
                        {%- unless special_tags contains group_label or group_label == blank -%}
                          {%- liquid
                            assign filters_available = true
                            for tag in current_tags
                              if tag contains group_with_suffix
                                assign is_active = true
                                assign active_count = active_count | plus: 1
                                assign all_active_tags_count = all_active_tags_count | plus: 1
                              endif
                            endfor

                            assign toggle_state = false
                            case filters_layout
                              when 'open'
                                assign toggle_state = true
                              when 'first-open'
                                if forloop.index == 1
                                  assign toggle_state = true
                                endif
                            endcase

                            if is_active
                              assign toggle_state = true
                            endif

                            if color_label contains group_label and settings.enable_color_swatches_collection
                              assign is_color = true
                            else
                              assign is_color = false
                            endif

                            assign count_threshold = 10
                            if is_color
                              assign count_threshold = 20
                            endif

                            capture filters_list_class
                              echo 'collection__filter-tags'
                              if is_color
                                echo ' collection__filter-tags--swatches' | append: ' collection__filter-tags--swatches-' | append: settings.color_swatches_product_style
                              endif
                            endcapture
                          -%}

                          <div class="collection__filter"{% if show_more %} data-show-more{% endif %} data-collection-filter>
                            <button type="button" class="collection__filter__title label-typography{% if toggle_state %} is-expanded{% endif %}"
                              aria-expanded="{{ toggle_state }}"
                              aria-controls="CollectionFilter--{{ group | handle }}-{{ forloop.index }}"
                              data-filter-active="{{ is_active }}"
                              data-collapsible-trigger>
                              <span>{{- group -}}{% if active_count > 0 %} ({{ active_count }}){% endif %}</span>

                              <span class="collection__filter__count">
                                {%- render 'icon-toggle-plus' -%}
                                {%- render 'icon-toggle-minus' -%}
                              </span>
                            </button>

                            <div id="CollectionFilter--{{ group | handle }}-{{ forloop.index }}"
                              class="collection__filter-tags-wrapper{% if toggle_state %} is-expanded{% endif %}"
                              aria-expanded="{% if toggle_state %}true{% else %}false{% endif %}"
                              data-collapsible-container
                              {% if toggle_state %}style="height:auto;"{% endif %}>
                              <ul class="{{ filters_list_class }}" data-collapsible-content>
                                {%- for tag in collection.all_tags -%}
                                  {%- liquid
                                    assign tag_parts = tag | split: '_'
                                    assign group_tag = tag_parts.last

                                    assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle

                                    if current_tags contains tag
                                      assign linked_tags = selected_tags | remove: current_tag_handle
                                    else
                                      assign linked_tags = selected_tags | append: '+' | append: current_tag_handle
                                    endif

                                    capture tag_link
                                      echo collection.url
                                      if linked_tags != blank
                                        echo '/' | append: linked_tags
                                      endif
                                      echo sort_param
                                    endcapture

                                    assign tag_link = tag_link | replace: '/+', '/' | replace: '++', '+' | replace: '+?', '?'
                                  -%}

                                  {%- if tag_parts.first == group -%}
                                    {%- liquid
                                      capture filter_classes
                                        echo 'collection__filter-tag'
                                        if is_color
                                          echo ' collection__filter-tag--swatch'
                                        else
                                          echo ' collection__filter-tag--default'
                                        endif
                                        if current_tags contains tag
                                          echo ' is-active'
                                        endif
                                      endcapture
                                    -%}

                                    {%- capture current_filter -%}
                                      <li class="{{ filter_classes }}" data-collection-filter-tag>
                                        {%- if is_color -%}
                                          <a href="{{ tag_link }}"
                                            class="swatch__button swatch__button--{{ settings.color_swatches_product_style }} filter__button"
                                            title="{{ group_tag }}"
                                            data-value="{{ group_tag }}"
                                            data-tag="{{ tag | handleize }}"
                                            data-collection-filter-tag-button>
                                            <div class="swatch__label" data-swatch="{{ group_tag | escape_once }}" data-tooltip="{{ group_tag | escape_once | capitalize }}">
                                              <span class="icon icon-check"></span>
                                            </div>
                                          </a>
                                          <span class="visually-hidden">{{ group_tag }}</span>
                                        {%- else -%}
                                          <a href="{{ tag_link }}"
                                            class="filter__button filter__button--{{ group_tag | handle }}"
                                            data-tag="{{ tag | handleize }}"
                                            data-collection-filter-tag-button>
                                            {{- group_tag -}}
                                          </a>
                                        {%- endif -%}
                                      </li>
                                    {%- endcapture -%}

                                    {%- liquid
                                      assign filters_counter = filters_counter | plus: 1
                                      if filters_counter <= count_threshold
                                        assign filters_markup_first_part = filters_markup_first_part | append: current_filter
                                      else
                                        assign filters_markup_the_rest = filters_markup_the_rest | append: current_filter
                                        if current_tags contains tag
                                          assign show_more_active_filters_counter = show_more_active_filters_counter | plus: 1
                                        endif
                                      endif
                                    -%}

                                    {%- if current_tags contains tag -%}
                                      {%- capture active_tag_filters -%}
                                        {{- active_tag_filters -}}
                                        <a class="filter__active__remove" href="{{ tag_link }}" data-tag="{{ tag | handleize }}" data-filter-tag-reset-button>
                                          {{ group_tag }}
                                          <span class="filter__x">✕</span>
                                        </a>
                                      {%- endcapture -%}
                                    {%- endif -%}
                                  {%- endif -%}
                                {%- endfor -%}

                                {%- if show_more -%}
                                  {{- filters_markup_first_part -}}

                                  {%- if filters_markup_the_rest != '' -%}
                                    {%- liquid
                                      assign open_show_more = false
                                      if show_more_active_filters_counter > 0
                                        assign open_show_more = true
                                      endif
                                    -%}
                                    <li class="collection__filter-actions" data-show-more-actions>
                                      <div id="CollectionFilterActions--{{ group | handle }}-{{ forloop.index }}"
                                        class="collection__filter-actions-container{% if open_show_more %} is-expanded{% endif %}"
                                        data-collapsible-container
                                        data-show-more-container
                                        aria-expanded="{{ open_show_more }}"
                                        {% if open_show_more %} style="height:auto;"{% endif %}>
                                        <ul class="{{ filters_list_class }}" data-collapsible-content>
                                          {{- filters_markup_the_rest -}}
                                        </ul>
                                      </div>

                                      <button type="button"
                                        class="collection__filters-more btn btn--text{% if open_show_more %} is-expanded{% endif %}"
                                        aria-expanded="{{ open_show_more }}"
                                        aria-controls="CollectionFilterActions--{{ group | handle }}-{{ forloop.index }}"
                                        data-collapsible-trigger
                                        data-show-more-trigger>
                                        <span>{{ 'collection.filters.show_more' | t }}</span>
                                        <span>{{ 'collection.filters.show_less' | t }}</span>
                                      </button>
                                    </li>
                                  {%- endif -%}

                                {%- else -%}
                                 {{- filters_markup_first_part -}}
                                 {{- filters_markup_the_rest -}}
                                {%- endif -%}
                              </ul>
                            </div>
                          </div>
                        {%- endunless -%}
                      {%- endfor -%}
                  {%- endcase -%}
                {%- endcapture -%}

                {%- capture filter_reset_buttons -%}
                  {%- if filter_mode == 'default' -%}
                    {%- for filter in collection.filters -%}
                      {%- if filter.type == 'price_range' -%}
                        {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                          {%- if filter.min_value.value != 0 or filter.max_value.value != filter.range_max -%}
                            {%- assign filter_count = filter_count | plus: 1 -%}
                            <a class="filter__active__remove" href="{{ filter.url_to_remove }}" data-filter-reset-button>
                              {%- liquid
                                assign min_value = filter.min_value.value | default: 0
                                assign max_value = filter.max_value.value | default: filter.range_max
                                if settings.currency_code_enable
                                  assign min_value = min_value | money_with_currency | remove: '.00' | remove: ',00'
                                  assign max_value = max_value | money_with_currency | remove: '.00' | remove: ',00'
                                else
                                  assign min_value = min_value | money_without_trailing_zeros
                                  assign max_value = max_value | money_without_trailing_zeros
                                endif
                              -%}
                              {{ min_value }} - {{ max_value }}
                              <span class="filter__x">✕</span>
                            </a>
                          {%- endif -%}
                        {%- endif -%}
                      {%- else -%}
                        {%- for filter_value in filter.active_values -%}
                          {%- assign filter_count = filter_count | plus: 1 -%}
                          <a class="filter__active__remove" href="{{ filter_value.url_to_remove }}" data-filter-reset-button>
                            {{ filter_value.label }}
                            <span class="filter__x">✕</span>
                          </a>
                        {%- endfor -%}
                      {%- endif -%}
                    {%- endfor -%}
                  {%- elsif filter_mode == 'tag' or filter_mode == 'group' -%}
                    {%- assign filter_count = all_active_tags_count -%}
                    {{- active_tag_filters -}}
                  {%- endif -%}
                {%- endcapture -%}

                {%- if filters_available -%}
                  {%- if filter_count > 0 -%}
                    <div
                      class="collection__filters__clear"
                      data-filters-reset
                      style="margin-bottom: 20px; padding-bottom: 20px; border-bottom: 1px solid #e5e5e5;"
                    >
                      {{- filter_reset_buttons -}}
                    </div>
                  {%- endif -%}

                  {{- filters -}}

                  {%- if filter_count > 0 -%}
                    <div
                      class="clear-filters"
                      style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #e5e5e5;"
                    >
                      <a href="{{ collection.url }}{{ sort_param }}" class="clear-filters__btn">
                        {{ 'products.general.clear_filters' | t }}
                      </a>
                    </div>
                  {%- endif -%}
                {%- endif -%}
              </form>
            </div>
          </div>
        {%- endif -%}

        {%- paginate collection.products by pagination_limit -%}
          <div
            class="collection__products collection-items--{{ columns }} collection-items--{{ size_mobile }}"
            data-collection-products
          >
            {%- if collection_count > 0 -%}
              {%- if collection.products_count > 0 -%}
                <div
                  class="grid"
                  {% if enable_infinity_scroll %}
                    id="AjaxinateLoop" data-ajaxinate-id="{{ section.id }}"
                  {% endif %}
                >
                  {%- assign tablet_counter = 1 -%}
                  {%- assign mobile_counter = 1 -%}

                  {%- for product in collection.products -%}
                    {%- assign animation_delay = forloop.index0 | modulo: columns | times: 1 -%}
                    {%- render 'product-grid-item',
                      product: product,
                      animation_delay: animation_delay,
                      tablet_counter: tablet_counter,
                      mobile_counter: mobile_counter,
                      item_index: forloop.index0
                    -%}
                    {%- assign tablet_counter = tablet_counter | plus: 1 -%}
                    {%- assign mobile_counter = mobile_counter | plus: 1 -%}
                  {%- endfor -%}
                </div>
              {%- else -%}
                <div class="collection--no-results">
                  <p class="no-matches">
                    {{ 'collections.general.no_matches_by_filter' | t: products_count: collection.products_count }}
                  </p>
                </div>
              {%- endif -%}

            {%- elsif collection.handle != 'all' and collection_count == 0 -%}
              <div class="collection--no-results">
                <p class="no-matches">{{ 'collections.general.no_matches' | t }}</p>
                <a href="{{ routes.root_url }}" class="btn btn--primary btn--solid">
                  {{- 'general.404.button_text' | t -}}
                </a>
              </div>
            {%- endif -%}

            {%- if enable_infinity_scroll -%}
              <div
                class="pagination pagination--infinite"
                id="AjaxinatePagination"
                data-ajaxinate-id="{{ section.id }}"
              >
                {%- if paginate.next -%}
                  <div class="pagination__loading">
                    <a href="{{ paginate.next.url }}">
                      <span class="visually-hidden">{{ 'general.pagination.next' | t }}</span>
                    </a>
                  </div>
                {%- endif -%}
              </div>

              {%- if paginate.pages > 1 -%}
                <noscript>
                  {%- render 'pagination', paginate: paginate -%}
                </noscript>
              {%- endif -%}

            {%- else -%}
              {%- if paginate.pages > 1 -%}
                {%- render 'pagination', paginate: paginate -%}
              {%- endif -%}
            {%- endif -%}
          </div>
        {%- endpaginate -%}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Filter panel elements
    const openFiltersBtn = document.querySelector('[data-open-filters]');
    const closeFiltersBtn = document.querySelector('[data-close-filters]');
    const filterPanel = document.querySelector('[data-filter-panel]');
    const filterOverlay = document.querySelector('[data-filter-overlay]');
    const body = document.body;

    // Open filter panel
    if (openFiltersBtn) {
      openFiltersBtn.addEventListener('click', function() {
        openFilterPanel();
      });
    }

    // Close filter panel
    if (closeFiltersBtn) {
      closeFiltersBtn.addEventListener('click', function() {
        closeFilterPanel();
      });
    }

    // Close on overlay click
    if (filterOverlay) {
      filterOverlay.addEventListener('click', function() {
        closeFilterPanel();
      });
    }

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && filterPanel && filterPanel.classList.contains('is-open')) {
        closeFilterPanel();
      }
    });

    // Function to open filter panel
    function openFilterPanel() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.add('is-open');
        filterOverlay.classList.add('is-open');
        body.classList.add('filter-panel-open');

        // Focus management for accessibility
        const firstFocusable = filterPanel.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (firstFocusable) {
          firstFocusable.focus();
        }
      }
    }

    // Function to close filter panel
    function closeFilterPanel() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.remove('is-open');
        filterOverlay.classList.remove('is-open');
        body.classList.remove('filter-panel-open');

        // Return focus to trigger button
        if (openFiltersBtn) {
          openFiltersBtn.focus();
        }
      }
    }

    // Enhanced collapsible filter groups - using original data attributes
    const filterTriggers = document.querySelectorAll('[data-collapsible-trigger]');

    filterTriggers.forEach(trigger => {
      trigger.addEventListener('click', function() {
        const container = document.getElementById(this.getAttribute('aria-controls'));
        if (!container) return;

        const isExpanded = this.getAttribute('aria-expanded') === 'true';

        // Toggle states
        this.setAttribute('aria-expanded', !isExpanded);
        container.setAttribute('aria-expanded', !isExpanded);

        // Toggle classes
        this.classList.toggle('is-expanded');
        container.classList.toggle('is-expanded');

        // Animate height
        if (!isExpanded) {
          container.style.height = 'auto';
          const height = container.scrollHeight + 'px';
          container.style.height = '0px';
          container.offsetHeight; // Force reflow
          container.style.height = height;
        } else {
          container.style.height = '0px';
        }
      });
    });

    // Handle show more functionality
    const showMoreTriggers = document.querySelectorAll('[data-show-more-trigger]');

    showMoreTriggers.forEach(trigger => {
      trigger.addEventListener('click', function() {
        const container = this.closest('[data-show-more]').querySelector('[data-show-more-container]');
        if (!container) return;

        const isExpanded = this.getAttribute('aria-expanded') === 'true';

        // Toggle states
        this.setAttribute('aria-expanded', !isExpanded);
        container.setAttribute('aria-expanded', !isExpanded);

        // Toggle classes
        this.classList.toggle('is-expanded');
        container.classList.toggle('is-expanded');

        // Animate height
        if (!isExpanded) {
          container.style.height = 'auto';
          const height = container.scrollHeight + 'px';
          container.style.height = '0px';
          container.offsetHeight; // Force reflow
          container.style.height = height;
        } else {
          container.style.height = '0px';
        }
      });
    });

    // Handle filter tag clicks - ensure they work properly
    const filterTagButtons = document.querySelectorAll('[data-collection-filter-tag-button]');

    filterTagButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        // Let the natural link navigation work
        // Don't prevent default - we want the page to navigate
        console.log('Filter clicked:', this.dataset.tag);
      });
    });

    // Handle filter reset buttons
    const filterResetButtons = document.querySelectorAll('[data-filter-tag-reset-button], [data-filter-reset-button]');

    filterResetButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        // Let the natural link navigation work
        console.log('Filter reset clicked:', this.dataset.tag);
      });
    });

    // Make sure form submissions work for default filters
    const filterForm = document.querySelector('[data-collection-filters-form]');
    if (filterForm) {
      // Handle price range inputs
      const priceInputs = filterForm.querySelectorAll('input[type="number"]');
      priceInputs.forEach(input => {
        input.addEventListener('change', function() {
          // Auto-submit form when price range changes
          const url = new URL(window.location);
          url.searchParams.set(this.name, this.value);
          if (!this.value) {
            url.searchParams.delete(this.name);
          }
          window.location.href = url.toString();
        });
      });

      // Handle checkbox/radio inputs for default filters
      const filterInputs = filterForm.querySelectorAll('input[type="checkbox"], input[type="radio"]:not([data-input-sort])');
      filterInputs.forEach(input => {
        input.addEventListener('change', function() {
          // Submit the form or navigate to the filter URL
          if (this.closest('form')) {
            const formData = new FormData(this.closest('form'));
            const params = new URLSearchParams();

            for (let [key, value] of formData.entries()) {
              if (value) {
                params.append(key, value);
              }
            }

            const url = new URL(window.location);
            url.search = params.toString();
            window.location.href = url.toString();
          }
        });
      });
    }
  });
</script>

{% schema %}
{
  "name": "Collection pages",
  "class": "collection-section",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "show_breadcrumbs",
      "label": "Show breadcrumbs",
      "default": true
    },
    {
      "type": "header",
      "content": "Filters and sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_filters",
      "label": "Enable filters",
      "default": true
    },
    {
      "type": "select",
      "label": "Default filter layout",
      "id": "filters_layout",
      "info": "Desktop only",
      "default": "open",
      "options": [
        { "label": "All filters open", "value": "open" },
        { "label": "All filters closed", "value": "closed" },
        { "label": "First filter open", "value": "first-open" }
      ]
    },
    {
      "type": "checkbox",
      "id": "show_more",
      "label": "Show a subset of filters from each group",
      "info": "Check this setting if you have a large number of filters, and want them to take up less space",
      "default": true
    },
    {
      "type": "select",
      "label": "Filter mode",
      "id": "filter_mode",
      "info": "Filters by group requires specific tag formatting. [Learn more](https://presidiocreative.com/link/palo-alto/docs/collection-filtering)",
      "default": "default",
      "options": [
        { "label": "Default (Faceted)", "value": "default" },
        { "label": "By tag", "value": "tag" },
        { "label": "By group", "value": "group" }
      ]
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding top",
      "default": 30
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding bottom",
      "default": 60
    }
  ],
  "blocks": [
    {
      "type": "promo",
      "name": "Promo",
      "limit": 5,
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection",
          "info": "Show on specific collection only"
        },
        {
        "type": "image_picker",
        "id": "image",
        "label": "Image"
        },
        {
          "type": "header",
          "content": "Layout"
        },
        {
          "type": "range",
          "id": "position",
          "label": "Show in position",
          "min": 1,
          "max": 48,
          "step": 1,
          "default": 1
        },
        {
          "type": "select",
          "id": "width",
          "label": "Width",
          "default": "auto",
          "options": [
            { "value": "full", "label": "Full width" },
            { "value": "half", "label": "2 grid items" },
            { "value": "auto", "label": "Grid item" }
          ]
        },
        {
          "type": "header",
          "content": "Text"
        },
        {
          "type": "richtext",
          "id": "title",
          "label": "Heading",
          "default": "<p>Promotion title</p>",
          "info": "Highlight one or two key words in your heading by italicizing them, then choose the highlight option below"
        },
        {
          "type": "header",
          "content": "Highlight"
        },
        {
          "type": "select",
          "id": "heading_highlight_type",
          "label": "Type",
          "default": "circle",
          "options": [
            { "value": "italics", "label": "Italics (no decoration)" },
            { "value": "highlight", "label": "Highlight" },
            { "value": "highlight-color", "label": "Text color" },
            { "value": "underline", "label": "Underline" },
            { "value": "squiggle", "label": "Squiggle" },
            { "value": "circle", "label": "Circle" },
            { "value": "stroke", "label": "Stroke (outlined text)" }
          ]
        },
        {
          "type": "color",
          "id": "highlight_color",
          "label": "Highlight color",
          "default": "#D43747"
        },
        {
          "type": "color",
          "id": "highlight_text_color",
          "label": "Text color",
          "default": "#FFFFFF"
        },
        {
          "type": "range",
          "id": "heading_size",
          "label": "Heading size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 10,
          "unit": "%"
        },
        {
          "type": "textarea",
          "id": "content",
          "label": "Text",
          "default": "Advertise a promotion or a sale"
        },
        {
          "type": "range",
          "id": "text_size",
          "label": "Text size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "select",
          "id": "text_color",
          "label": "Text color",
          "default": "text-light",
          "options": [
            {
              "value": "text-light",
              "label": "Light"
            },
            {
              "value": "text-dark",
              "label": "Dark"
            }
          ]
        },
        {
          "type": "select",
          "id": "text_position",
          "label": "Content position",
          "default": "bottom-left",
          "options": [
            { "value": "left", "label": "Left" },
            { "value": "center", "label": "Center" },
            { "value": "right", "label": "Right" },
            { "value": "bottom-left", "label": "Bottom left" },
            { "value": "bottom-right", "label": "Bottom right" },
            { "value": "top-left", "label": "Top left" },
            { "value": "top-right", "label": "Top right" }
          ]
        },
        {
          "type": "select",
          "id": "layout",
          "label": "Content layout",
          "default": "stacked",
          "options": [
            { "label": "Inline", "value": "inline" },
            { "label": "Stacked", "value": "stacked" }
          ],
          "info": "The 'Inline' option only applies on desktop when the promo width is 'Full width'"
        },
        {
          "type": "range",
          "id": "overlay_opacity",
          "label": "Text contrast",
          "info": "Improves readability of text",
          "min": 0,
          "max": 95,
          "step": 5,
          "unit": "%",
          "default": 10
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Background color",
          "default": "#D3D3D3",
          "info": "Applies if no image is chosen"
        },
        {
          "type": "header",
          "content": "Button"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button text",
          "info": "Leave blank to link entire image"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button URL"
        },
        {
          "type": "select",
          "id": "button_color",
          "label": "Button color",
          "default": "btn--white",
          "options": [
            { "label": "Primary", "value": "btn--primary" },
            { "label": "Secondary", "value": "btn--secondary" },
            { "label": "White", "value": "btn--white" },
            { "label": "Black", "value": "btn--black" }
          ]
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "Button style",
          "default": "btn--solid-border",
          "options": [
            { "label": "Solid", "value": "btn--solid" },
            { "label": "Outline", "value": "btn--outline" },
            { "label": "Solid with border", "value": "btn--solid-border" },
            { "label": "Text", "value": "btn--text" }
          ]
        },
        {
          "type": "select",
          "id": "button_size",
          "label": "Size",
          "default": "btn--small",
          "options": [
            { "label": "Large", "value": "btn--large" },
            { "label": "Medium", "value": "btn--medium" },
            { "label": "Small", "value": "btn--small" }
          ]
        }
      ]
    }
  ]
}
{% endschema %}
