{%- liquid
  assign carousel = false
  assign collection_count = collection.all_products_count
  assign filter_mode = section.settings.filter_mode
  assign filter_by_tags = false
  assign enable_filters = section.settings.enable_filters
  assign filters_layout = section.settings.filters_layout
  assign show_more = section.settings.show_more

  # ← read the 2/3/4 per-row setting
  assign columns = section.settings.products_per_row_on_desktop | plus: 0

  assign enable_sorting = section.settings.enable_sorting
  assign enable_infinity_scroll = settings.enable_infinity_scroll
  assign pagination_limit = columns | times: 12
  assign show_breadcrumbs = section.settings.show_breadcrumbs
  assign bg_color = section.settings.bg_color
  assign products_count = 'products.general.products_with_count' | t: count: collection.products_count

  assign section_class = 'collection collection-items section-padding'
  if enable_filters == false and enable_sorting == false
    assign section_class = section_class | append: ' collection--filters-sorting-disabled'
  else
    if enable_filters == false
      assign section_class = section_class | append: ' collection--filters-disabled'
    elsif enable_sorting == false
      assign section_class = section_class | append: ' collection--sorting-disabled'
    endif
  endif

  unless show_breadcrumbs
    assign section_class = section_class | append: ' collection--breadcrumbs-disabled'
  endunless

  assign id = 'Collection--' | append: section.id
  assign selector_id = '#' | append: id
  assign animations_enabled = settings.animations_enabled
  assign animation_anchor = selector_id
  assign animation_delay = 150
  assign min_sticky_bar_gutter = 40

  if enable_filters
    if filter_mode == 'tag' or filter_mode == 'group'
      assign filter_by_tags = true
    endif
  endif

  if enable_filters and filter_by_tags
    for tag in current_tags
      unless tag contains '_badge' and tag contains '_preorder'
        assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle
        assign selected_tags = selected_tags | append: current_tag_handle
        unless forloop.last
          assign selected_tags = selected_tags | append: '+'
        endunless
      endunless
    endfor
  endif
-%}

{%- style -%}
  /* ———————————————————————————————————————————————————— */
  /* 1) SLIDE-IN FILTER DRAWER + BACKDROP (desktop only) */
  /* ———————————————————————————————————————————————————— */
  .collection__filters {
    position: fixed;
    top: 0;
    left: 0;
    width: 280px;
    max-width: 80%;
    height: 100vh;
    background-color: var(--bg, #fff);
    overflow-y: auto;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    z-index: 9999;
    box-shadow: 2px 0 12px rgba(0,0,0,0.1);
  }
  .collection__filters.is-open {
    transform: translateX(0);
  }

  .collection__filters-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,0.5);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease;
    z-index: 9998;
  }
  .collection__filters-backdrop.is-open {
    opacity: 1;
    visibility: visible;
  }

  /* If “Enable filters” is OFF, hide the toggle button completely */
  .collection--filters-disabled .collection__filters__toggle {
    display: none !important;
  }

  /* ———————————————————————————————————————————————————— */
  /* 2) PRODUCT GRID (CSS Grid approach) */
  /* ———————————————————————————————————————————————————— */
  /* We store the “columns” number (2/3/4) in a CSS custom property on .collection__products */
  .collection__products {
    --collection-columns: 3; /* fallback, overridden inline */
  }
  .collection__products[data-collection-products] {
    --collection-columns: var(--collection-columns, 3);
  }

  .collection__products .grid {
    display: grid;
    gap: 20px; /* adjust gutter as needed */
    grid-template-columns: repeat(var(--collection-columns), minmax(0,1fr));
  }
  .collection__products .grid__item {
    box-sizing: border-box;
  }

  /* ———————————————————————————————————————————————————— */
  /* 3) STICKY BAR HEIGHT VARIABLE (no-JS fallback) */
  /* ———————————————————————————————————————————————————— */
  :root {
    {%- if show_breadcrumbs or enable_sorting or enable_filters -%}
      --collection-sticky-bar-height: calc(.75rem * var(--FONT-ADJUST-BODY) + {{ min_sticky_bar_gutter }}px);
    {%- endif -%}
  }

  {{ selector_id }} {
    --PT: {{ section.settings.padding_top }}px;
    --PB: {{ section.settings.padding_bottom }}px;
  }

  {%- if bg_color != 'rgba(0,0,0,0)' and bg_color != '' -%}
    .template-collection .collection-section {
      background-color: {{ bg_color }};
    }
    .collection__sticky-bar,
    .collection__filters {
      --bg: {{ bg_color }};
    }
  {%- endif -%}
{%- endstyle -%}

<div
  id="{{ id }}"
  class="{{ section_class }}"
  data-section-type="collection-template"
  data-section-id="{{ section.id }}"
  data-enable-filters="{{ enable_filters }}"
  data-enable-sorting="{{ enable_sorting }}"
  data-filters-default-state="{{ filters_layout }}"
  data-collapsible-transition-override
  data-filter-mode="{{ filter_mode }}"
  {%- if filter_by_tags -%}
    data-collection="{{ collection.url | default: routes.all_products_collection_url }}"
    data-tags="{{ selected_tags }}"
  {%- endif -%}
>
  <div class="collection__wrapper" data-collection-wrapper>
    <div class="wrapper--full-padded">
      <div class="collection__inner">
        {%- if show_breadcrumbs or enable_filters or enable_sorting -%}
          <div
            id="CollectionStickyBar"
            class="collection__sticky-bar"
            data-collection-sticky-bar
            {%- if animations_enabled -%}
              data-aos="fade"
              data-aos-anchor="{{ animation_anchor }}"
              data-aos-delay="{{ animation_delay }}"
              {%- assign animation_delay = animation_delay | plus: 150 -%}
            {%- endif -%}
          >
            {%- if show_breadcrumbs -%}
              {%- render 'breadcrumbs' -%}
            {%- endif -%}

            {%- if enable_sorting -%}
              {%- assign sort_by = search.sort_by
                | default: collection.sort_by
                | default: collection.default_sort_by
              -%}
              {%- assign sort_options = search.sort_options | default: collection.sort_options -%}
              <div class="collection__sort-bar">
                <button type="button" class="collection__sort__label" data-sort-toggle>
                  {{ 'collections.sorting.title' | t }}
                  {%- render 'icon-select' -%}
                </button>

                <div class="collection__sort__option-wrapper" data-collection-sort-options>
                  <div class="collection__sort__options">
                    <ul
                      class="collection__filter-tags collection__filter-tags--default"
                      collection-sort-by="{{ sort_by }}"
                    >
                      {%- for option in sort_options -%}
                        <li class="collection__filter-tag">
                          <input
                            class="collection__sort__input"
                            type="radio"
                            name="sort_by_bar"
                            value="{{ option.value }}"
                            id="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                            data-input-sort
                            {% if option.value == sort_by %}
                              checked
                            {% endif %}
                          >
                          <label
                            class="collection__sort__button"
                            for="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                            tabindex="0"
                          >
                            {{- option.name -}}
                          </label>
                        </li>
                      {%- endfor -%}
                    </ul>

                    <noscript>
                      <button type="submit" class="btn btn--primary btn--solid">
                        {{ 'collection.filters.sort_button' | t }}
                      </button>
                    </noscript>
                  </div>
                </div>
              </div>
            {%- endif -%}

            <div class="collection__products-count" data-products-count="{{ products_count }}">
              {{- products_count -}}
            </div>

            {%- if enable_filters or enable_sorting -%}
              <button
                class="collection__filters__toggle"
                aria-label="{{ 'products.general.filters' | t }}"
                data-toggle-filters
              >
                {%- render 'icon-filter' -%}
                <span>{{ 'products.general.filters' | t }}</span>
              </button>
            {%- endif -%}
          </div>
        {%- endif -%}

        {%- comment -%}
          Insert exactly your existing “capture filters” logic here (the entire block that builds
          the facet tags, tag-based filters, group-based filters, etc.), up to the closing </div>
          of the filter drawer. (We omitted it here for brevity, but you should paste your original
          filter‐building code in place of this comment—just keep the same indentation/whitespace.)
        {%- endcomment -%}

        {%- capture filter_reset_buttons -%}
          {%- if filter_mode == 'default' -%}
            {%- assign filter_count = 0 -%}
            {%- for filter in collection.filters -%}
              {%- if filter.type == 'price_range' -%}
                {%- if filter.min_value.value != nil or filter.max_value.value != nil -%}
                  {%- if filter.min_value.value != 0 or filter.max_value.value != filter.range_max -%}
                    {%- assign filter_count = filter_count | plus: 1 -%}
                    <a
                      class="filter__active__remove"
                      href="{{ filter.url_to_remove }}"
                      data-filter-reset-button>
                      {%- assign min_value = filter.min_value.value | default: 0 -%}
                      {%- assign max_value = filter.max_value.value | default: filter.range_max -%}
                      {%- if settings.currency_code_enable -%}
                        {%- assign min_value = min_value | money_with_currency | remove: '.00' | remove: ',00' -%}
                        {%- assign max_value = max_value | money_with_currency | remove: '.00' | remove: ',00' -%}
                      {%- else -%}
                        {%- assign min_value = min_value | money_without_trailing_zeros -%}
                        {%- assign max_value = max_value | money_without_trailing_zeros -%}
                      {%- endif -%}
                      {{ min_value }} - {{ max_value }}
                      <span class="filter__x">✕</span>
                    </a>
                  {%- endif -%}
                {%- endif -%}
              {%- else -%}
                {%- for filter_value in filter.active_values -%}
                  {%- assign filter_count = filter_count | plus: 1 -%}
                  <a
                    class="filter__active__remove"
                    href="{{ filter_value.url_to_remove }}"
                    data-filter-reset-button>
                    {{ filter_value.label }}
                    <span class="filter__x">✕</span>
                  </a>
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
          {%- elsif filter_mode == 'tag' or filter_mode == 'group' -%}
            {%- assign filter_count = all_active_tags_count -%}
            {{- active_tag_filters -}}
          {%- endif -%}
        {%- endcapture -%}

        {%- if enable_sorting or enable_filters -%}
          <div class="collection__filters" data-collection-filters>
            <div class="collection__filters-wrapper" data-collection-filters-wrapper>
              <div class="collection__filters-list" data-collection-filters-list>
                <form
                  data-collection-filters-form
                  {%- if animations_enabled -%}
                    data-aos="fade"
                    data-aos-anchor="{{ animation_anchor }}"
                    data-aos-delay="{{ animation_delay }}"
                    {%- assign animation_delay = animation_delay | plus: 150 -%}
                  {%- endif -%}
                >
                  {%- if collection.current_type -%}
                    <input type="hidden" name="q" value="{{ collection.current_type }}">
                  {%- endif -%}
                  {%- if collection.current_vendor -%}
                    <input type="hidden" name="q" value="{{ collection.current_vendor }}">
                  {%- endif -%}

                  <div class="collection__filters-header{% if filter_count == 0 %} hidden{% endif %}">
                    <button
                      class="collection__filters__close"
                      type="button"
                      data-close-filters
                    >
                      <span class="visually-hidden">{{ 'products.general.close' | t }}</span>
                      {%- render 'icon-close' -%}
                    </button>

                    {%- if enable_filters -%}
                      <div class="collection__filters__top">
                        <div class="collection__filters__title">
                          <span>
                            {{- 'products.general.filters' | t -}}
                            {% if filter_count > 0 %} ({{ filter_count }}){% endif -%}
                          </span>
                        </div>
                        <a
                          href="{{ collection.url }}{{ sort_param }}"
                          class="collection__filters__reset{% if current_tags != blank or filter_count > 0 %} is-visible{% endif %}"
                          data-filter-reset-button
                        >
                          {{- 'products.general.clear_filters' | t -}}
                        </a>
                      </div>

                      <div class="collection__filters__clear" data-filters-reset>
                        {{- filter_reset_buttons -}}
                      </div>

                      <hr class="hr--full collection__filters__line">
                    {%- endif -%}
                  </div>

                  {%- if enable_sorting -%}
                    {%- assign sort_by = search.sort_by
                      | default: collection.sort_by
                      | default: collection.default_sort_by
                    -%}
                    {%- assign sort_options = search.sort_options | default: collection.sort_options -%}
                    <div class="collection__sort">
                      <button
                        type="button"
                        class="collection__sort__label label-typography"
                        aria-expanded="false"
                        aria-controls="CollectionSorting"
                        data-collapsible-trigger
                      >
                        {{ 'collections.sorting.title' | t }}
                        {%- render 'icon-toggle-plus' -%}
                        {%- render 'icon-toggle-minus' -%}
                      </button>

                      <div
                        id="CollectionSorting"
                        class="collection__sort__option-wrapper"
                        aria-expanded="false"
                        data-collapsible-container
                      >
                        <div class="collection__sort__options" data-collapsible-content>
                          <ul
                            class="collection__filter-tags collection__filter-tags--default"
                            collection-sort-by="{{ sort_by }}"
                          >
                            {%- for option in sort_options -%}
                              <li class="collection__filter-tag">
                                <input
                                  class="collection__sort__input"
                                  type="radio"
                                  name="sort_by"
                                  value="{{ option.value }}"
                                  id="filter-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                                  data-input-sort
                                  {% if option.value == sort_by %}
                                    checked
                                  {% endif %}
                                >
                                <label
                                  class="collection__sort__button"
                                  for="filter-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                                >
                                  {{- option.name -}}
                                </label>
                              </li>
                            {%- endfor -%}
                          </ul>
                          <noscript>
                            <button type="submit" class="btn btn--primary btn--solid">
                              {{ 'collection.filters.sort_button' | t }}
                            </button>
                          </noscript>
                        </div>
                      </div>
                    </div>
                  {%- endif -%}

                  {%- if enable_filters and filters_available -%}
                    {{- filters -}}
                  {%- endif -%}
                </form>
              </div>
            </div>

            {%- if enable_filters -%}
              <div class="collection__filters-bottom{% if current_tags != blank or filter_count > 0 %} is-visible{% endif %}">
                <button
                  class="collection__filters__close-bottom btn btn--primary"
                  type="button"
                  data-close-filters
                >
                  {{- 'collection.filters.close' | t -}}
                </button>
              </div>
            {%- endif -%}
          </div>

          <div class="collection__filters-backdrop" data-filters-backdrop></div>
        {%- endif -%}

        <div
          class="collection__products collection-items--{{ columns }} collection-items--{{ size_mobile }}"
          data-collection-products
          style="--collection-columns: {{ columns }};"
        >
          {%- paginate collection.products by pagination_limit -%}
            <div
              class="grid"
              {% if enable_infinity_scroll %}
                id="AjaxinateLoop" data-ajaxinate-id="{{ section.id }}"
              {% endif %}
            >
              {%- assign tablet_counter = 1 -%}
              {%- assign mobile_counter = 1 -%}
              {%- for product in collection.products -%}
                {%- assign animation_delay = forloop.index0 | modulo: columns | times: 1 -%}
                <div class="grid__item">
                  {%- render 'product-grid-item',
                    product: product,
                    animation_delay: animation_delay,
                    tablet_counter: tablet_counter,
                    mobile_counter: mobile_counter,
                    item_index: forloop.index0
                  -%}
                </div>
                {%- assign tablet_counter = tablet_counter | plus: 1 -%}
                {%- assign mobile_counter = mobile_counter | plus: 1 -%}
              {%- endfor -%}
            </div>
          {%- endpaginate -%}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var drawer = document.querySelector('[data-collection-filters]');
    var backdrop = document.querySelector('[data-filters-backdrop]');
    var toggleButtons = document.querySelectorAll('[data-toggle-filters]');
    var closeButtons = document.querySelectorAll('[data-close-filters]');

    if (!drawer || !backdrop) return;

    function openFiltersDrawer() {
      drawer.classList.add('is-open');
      backdrop.classList.add('is-open');
      document.body.style.overflow = 'hidden';
    }
    function closeFiltersDrawer() {
      drawer.classList.remove('is-open');
      backdrop.classList.remove('is-open');
      document.body.style.overflow = '';
    }

    toggleButtons.forEach(function(btn) {
      btn.addEventListener('click', openFiltersDrawer);
    });
    closeButtons.forEach(function(btn) {
      btn.addEventListener('click', closeFiltersDrawer);
    });
    backdrop.addEventListener('click', closeFiltersDrawer);
  });
</script>

{% schema %}
{
  "name": "Collection pages",
  "class": "collection-section",
  "settings": [
    {
      "type": "select",
      "id": "products_per_row_on_desktop",
      "label": "Products per row (Desktop)",
      "default": "3",
      "options": [
        { "value": "2", "label": "2 per row" },
        { "value": "3", "label": "3 per row" },
        { "value": "4", "label": "4 per row" }
      ]
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "show_breadcrumbs",
      "label": "Show breadcrumbs",
      "default": true
    },
    {
      "type": "header",
      "content": "Filters and sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_filters",
      "label": "Enable filters",
      "default": true
    },
    {
      "type": "select",
      "label": "Default filter layout",
      "id": "filters_layout",
      "info": "Desktop only",
      "default": "open",
      "options": [
        { "label": "All filters open", "value": "open" },
        { "label": "All filters closed", "value": "closed" },
        { "label": "First filter open", "value": "first-open" }
      ]
    },
    {
      "type": "checkbox",
      "id": "show_more",
      "label": "Show a subset of filters from each group",
      "info": "Check this setting if you have a large number of filters, and want them to take up less space",
      "default": true
    },
    {
      "type": "select",
      "label": "Filter mode",
      "id": "filter_mode",
      "info": "Filters by group requires specific tag formatting.",
      "default": "default",
      "options": [
        { "label": "Default (Faceted)", "value": "default" },
        { "label": "By tag", "value": "tag" },
        { "label": "By group", "value": "group" }
      ]
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding top",
      "default": 30
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding bottom",
      "default": 60
    }
  ],
  "blocks": [
    {
      "type": "promo",
      "name": "Promo",
      "limit": 5,
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection",
          "info": "Show on specific collection only"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "header",
          "content": "Layout"
        },
        {
          "type": "range",
          "id": "position",
          "label": "Show in position",
          "min": 1,
          "max": 48,
          "step": 1,
          "default": 1
        },
        {
          "type": "select",
          "id": "width",
          "label": "Width",
          "default": "auto",
          "options": [
            { "value": "full", "label": "Full width" },
            { "value": "half", "label": "2 grid items" },
            { "value": "auto", "label": "Grid item" }
          ]
        },
        {
          "type": "header",
          "content": "Text"
        },
        {
          "type": "richtext",
          "id": "title",
          "label": "Heading",
          "default": "<p>Promotion title</p>",
          "info": "Highlight one or two key words in your heading by italicizing them, then choose the highlight option below"
        },
        {
          "type": "header",
          "content": "Highlight"
        },
        {
          "type": "select",
          "id": "heading_highlight_type",
          "label": "Type",
          "default": "circle",
          "options": [
            { "value": "italics", "label": "Italics (no decoration)" },
            { "value": "highlight", "label": "Highlight" },
            { "value": "highlight-color", "label": "Text color" },
            { "value": "underline", "label": "Underline" },
            { "value": "squiggle", "label": "Squiggle" },
            { "value": "circle", "label": "Circle" },
            { "value": "stroke", "label": "Stroke (outlined text)" }
          ]
        },
        {
          "type": "color",
          "id": "highlight_color",
          "label": "Highlight color",
          "default": "#D43747"
        },
        {
          "type": "color",
          "id": "highlight_text_color",
          "label": "Text color",
          "default": "#FFFFFF"
        },
        {
          "type": "range",
          "id": "heading_size",
          "label": "Heading size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 10,
          "unit": "%"
        },
        {
          "type": "textarea",
          "id": "content",
          "label": "Text",
          "default": "Advertise a promotion or a sale"
        },
        {
          "type": "range",
          "id": "text_size",
          "label": "Text size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "select",
          "id": "text_color",
          "label": "Text color",
          "default": "text-light",
          "options": [
            { "value": "text-light", "label": "Light" },
            { "value": "text-dark", "label": "Dark" }
          ]
        },
        {
          "type": "select",
          "id": "text_position",
          "label": "Content position",
          "default": "bottom-left",
          "options": [
            { "value": "left", "label": "Left" },
            { "value": "center", "label": "Center" },
            { "value": "right", "label": "Right" },
            { "value": "bottom-left", "label": "Bottom left" },
            { "value": "bottom-right", "label": "Bottom right" },
            { "value": "top-left", "label": "Top left" },
            { "value": "top-right", "label": "Top right" }
          ]
        },
        {
          "type": "select",
          "id": "layout",
          "label": "Content layout",
          "default": "stacked",
          "options": [
            { "label": "Inline", "value": "inline" },
            { "label": "Stacked", "value": "stacked" }
          ],
          "info": "The 'Inline' option only applies on desktop when the promo width is 'Full width'"
        },
        {
          "type": "range",
          "id": "overlay_opacity",
          "label": "Text contrast",
          "info": "Improves readability of text",
          "min": 0,
          "max": 95,
          "step": 5,
          "unit": "%",
          "default": 10
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Background color",
          "default": "#D3D3D3",
          "info": "Applies if no image is chosen"
        },
        {
          "type": "header",
          "content": "Button"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button text",
          "info": "Leave blank to link entire image"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button URL"
        },
        {
          "type": "select",
          "id": "button_color",
          "label": "Button color",
          "default": "btn--white",
          "options": [
            { "label": "Primary", "value": "btn--primary" },
            { "label": "Secondary", "value": "btn--secondary" },
            { "label": "White", "value": "btn--white" },
            { "label": "Black", "value": "btn--black" }
          ]
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "Button style",
          "default": "btn--solid-border",
          "options": [
            { "label": "Solid", "value": "btn--solid" },
            { "label": "Outline", "value": "btn--outline" },
            { "label": "Solid with border", "value": "btn--solid-border" },
            { "label": "Text", "value": "btn--text" }
          ]
        },
        {
          "type": "select",
          "id": "button_size",
          "label": "Size",
          "default": "btn--small",
          "options": [
            { "label": "Large", "value": "btn--large" },
            { "label": "Medium", "value": "btn--medium" },
            { "label": "Small", "value": "btn--small" }
          ]
        }
      ]
    }
  ]
}
{% endschema %}
