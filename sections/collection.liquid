{%- comment -%} /sections/collection.liquid {%- endcomment -%}

{%- liquid
  assign carousel = false
  assign collection_count = collection.all_products_count
  assign filter_mode = section.settings.filter_mode
  assign filter_by_tags = false
  assign enable_filters = section.settings.enable_filters
  assign filters_layout = section.settings.filters_layout
  assign show_more = section.settings.show_more

  assign columns_mobile = settings.products_per_row_on_mobile | plus: 0

  case columns_mobile
    when 1
      assign size_mobile = 'mobile--one-whole'
    when 2
      assign size_mobile = 'mobile--one-half'
  endcase

  if enable_filters
    if filter_mode == 'tag' or filter_mode == 'group'
      assign filter_by_tags = true
    endif
  endif

  if enable_filters and filter_by_tags
    for tag in current_tags
      unless tag contains '_badge' and tag contains '_preorder'
        assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle
        assign selected_tags = selected_tags | append: current_tag_handle
        unless forloop.last
          assign selected_tags = selected_tags | append: '+'
        endunless
      endunless
    endfor
  endif

  assign columns = settings.products_per_row_on_desktop | plus: 0
  assign enable_sorting = section.settings.enable_sorting
  assign enable_infinity_scroll = settings.enable_infinity_scroll
  assign pagination_limit = columns | times: 12
  assign show_breadcrumbs = section.settings.show_breadcrumbs
  assign bg_color = section.settings.bg_color
  assign products_count = 'products.general.products_with_count' | t: count: collection.products_count

  assign section_class = 'collection collection-items section-padding'
  if enable_filters == false and enable_sorting == false
    assign section_class = section_class | append: ' collection--filters-sorting-disabled'
  else
    if enable_filters == false
      assign section_class = section_class | append: ' collection--filters-disabled'
    elsif enable_sorting == false
      assign section_class = section_class | append: ' collection--sorting-disabled'
    endif
  endif

  unless show_breadcrumbs
    assign section_class = section_class | append: ' collection--breadcrumbs-disabled'
  endunless

  assign id = 'Collection--' | append: section.id
  assign selector_id = '#' | append: id
  assign animations_enabled = settings.animations_enabled
  assign animation_anchor = selector_id
  assign animation_delay = 150
  assign min_sticky_bar_gutter = 40
-%}

{%- style -%}
  :root {
    --filter-panel-width: 350px;
    --filter-panel-transition: transform 0.3s ease-in-out;
    {%- if show_breadcrumbs or enable_sorting or enable_filters -%}
      --collection-sticky-bar-height: calc(.75rem * var(--FONT-ADJUST-BODY) + {{ min_sticky_bar_gutter }}px);
    {%- endif -%}
  }

  {{ selector_id }} {
    --PT: {{ section.settings.padding_top }}px;
    --PB: {{ section.settings.padding_bottom }}px;
  }

  {%- if bg_color != 'rgba(0,0,0,0)' and bg_color != '' -%}
    .template-collection .collection-section {
      background-color: {{ bg_color }};
    }
    .filter-panel {
      --bg: {{ bg_color }};
    }
  {%- endif -%}

  /* Filter Panel Overlay */
  .filter-panel-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .filter-panel-overlay.is-open {
    opacity: 1;
    visibility: visible;
  }

  /* Filter Panel */
  .filter-panel {
    position: fixed;
    top: 0;
    left: 0;
    width: var(--filter-panel-width);
    height: 100vh;
    background: var(--bg, #ffffff);
    z-index: 1000;
    transform: translateX(-100%);
    transition: var(--filter-panel-transition);
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
  }

  .filter-panel.is-open {
    transform: translateX(0);
  }

  /* Filter Panel Header */
  .filter-panel__header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 20px 24px;
    border-bottom: 1px solid #e5e5e5;
    background: #f8f9fa;
    flex-shrink: 0;
  }

  .filter-panel__title {
    font-size: 20px;
    font-weight: 600;
    margin: 0;
    color: #333;
  }

  .filter-panel__close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .filter-panel__close:hover {
    background-color: #e9ecef;
  }

  .filter-panel__close svg {
    width: 20px;
    height: 20px;
  }

  /* Filter Panel Content */
  .filter-panel__content {
    flex: 1;
    overflow-y: auto;
    padding: 24px;
  }

  /* Filter Buttons in Top Bar */
  .filters-trigger-btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: #fff;
    border: 1px solid #ddd;
    padding: 10px 16px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    font-weight: 500;
    color: #333;
  }

  .filters-trigger-btn:hover {
    background: #f5f5f5;
    border-color: #bbb;
  }

  .filters-trigger-btn svg {
    width: 16px;
    height: 16px;
  }

  /* Filter Groups */
  .filter-group {
    margin-bottom: 28px;
  }

  .filter-group:last-child {
    margin-bottom: 0;
  }

  .filter-group__title {
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e5e5e5;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: color 0.2s ease;
    background: none;
    border: none;
    width: 100%;
    text-align: left;
  }

  .filter-group__title:hover {
    color: #666;
  }

  .filter-group__title .toggle-icon {
    transition: transform 0.2s ease;
  }

  .filter-group__title.is-expanded .toggle-icon {
    transform: rotate(180deg);
  }

  .filter-group__content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }

  .filter-group__content.is-expanded {
    max-height: 400px;
  }

  /* Filter Options */
  .filter-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .filter-option {
    display: block;
  }

  .filter-option__link {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    text-decoration: none;
    color: #555;
    border-radius: 6px;
    transition: all 0.2s ease;
    font-size: 14px;
    border: 1px solid transparent;
  }

  .filter-option__link:hover {
    background-color: #f8f9fa;
    color: #333;
    text-decoration: none;
  }

  .filter-option.is-active .filter-option__link {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }

  .filter-option.is-active .filter-option__link:hover {
    background-color: #0056b3;
    border-color: #0056b3;
  }

  /* Clear Filters */
  .clear-filters {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e5e5e5;
  }

  .clear-filters__btn {
    width: 100%;
    background: #6c757d;
    color: white;
    border: none;
    padding: 12px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-decoration: none;
    display: block;
    text-align: center;
  }

  .clear-filters__btn:hover {
    background: #5a6268;
    text-decoration: none;
    color: white;
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .filter-panel {
      width: 85vw;
      max-width: 320px;
    }
  }

  /* Body scroll lock when panel is open */
  body.filter-panel-open {
    overflow: hidden;
  }
{%- endstyle -%}

<div
  id="{{ id }}"
  class="{{ section_class }}"
  data-section-type="collection-template"
  data-section-id="{{ section.id }}"
  data-enable-filters="{{ enable_filters }}"
  data-enable-sorting="{{ enable_sorting }}"
  data-filters-default-state="{{ filters_layout }}"
  data-collapsible-transition-override
  data-filter-mode="{{ filter_mode }}"
  {% if filter_by_tags %}
    data-collection="{{ collection.url | default: routes.all_products_collection_url }}"
    data-tags="{{ selected_tags }}"
  {% endif %}
>
  <div class="collection__wrapper" data-collection-wrapper>
    <div class="wrapper--full-padded">
      <div class="collection__inner">
        {%- if show_breadcrumbs or enable_filters or enable_sorting -%}
          <div
            id="CollectionStickyBar"
            class="collection__sticky-bar"
            data-collection-sticky-bar
            {% if animations_enabled %}
              data-aos="fade"
              data-aos-anchor="{{ animation_anchor }}"
              data-aos-delay="{{ animation_delay }}"
              {%- assign animation_delay = animation_delay | plus: 150 -%}
            {% endif %}
          >
            {%- if show_breadcrumbs -%}
              {%- render 'breadcrumbs' -%}
            {%- endif -%}

            <div style="display: flex; align-items: center; gap: 16px; justify-content: space-between; flex-wrap: wrap;">
              <div style="display: flex; align-items: center; gap: 16px;">
                {%- if enable_filters -%}
                  <button class="filters-trigger-btn" data-open-filters>
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
                    </svg>
                    {{ 'products.general.filters' | t }}
                  </button>
                {%- endif -%}

                {%- if enable_sorting -%}
                  {%- assign sort_by = search.sort_by
                    | default: collection.sort_by
                    | default: collection.default_sort_by
                  -%}
                  {%- assign sort_options = search.sort_options | default: collection.sort_options -%}

                  <div class="collection__sort-bar">
                    <button type="button" class="collection__sort__label" data-sort-toggle>
                      {{ 'collections.sorting.title' | t }}
                      {%- render 'icon-select' -%}
                    </button>

                    <div class="collection__sort__option-wrapper" data-collection-sort-options>
                      <div class="collection__sort__options">
                        <ul
                          class="collection__filter-tags collection__filter-tags--default"
                          collection-sort-by="{{ sort_by }}"
                        >
                          {%- for option in sort_options -%}
                            <li class="collection__filter-tag">
                              <input
                                class="collection__sort__input"
                                type="radio"
                                name="sort_by_bar"
                                value="{{ option.value }}"
                                id="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                                data-input-sort
                                {% if option.value == sort_by %}
                                  checked
                                {% endif %}
                              >
                              <label
                                class="collection__sort__button"
                                for="filter-bar-{{ option.name | handle | append: option.value | handle | append: section.id }}"
                                tabindex="0"
                              >
                                {{- option.name -}}
                              </label>
                            </li>
                          {%- endfor -%}
                        </ul>

                        <noscript>
                          <button type="submit" class="btn btn--primary btn--solid">
                            {{ 'collection.filters.sort_button' | t }}
                          </button>
                        </noscript>
                      </div>
                    </div>
                  </div>
                {%- endif -%}
              </div>

              <div class="collection__products-count" data-products-count="{{ products_count }}">
                {{- products_count -}}
              </div>
            </div>
          </div>
        {%- endif -%}

        {%- comment -%} Slide-in Filter Panel {%- endcomment -%}
        {%- if enable_filters -%}
          {%- liquid
            assign filters_available = false
            assign filter_count = 0
            assign all_active_tags_count = 0

            capture sort_param
              if collection.sort_by != collection.default_sort_by
                assign sort_parameter = '/?'
                if collection.current_type or collection.current_vendor
                  assign sort_parameter = '&'
                endif
                echo sort_parameter | append: 'sort_by=' | append: collection.sort_by
              endif
            endcapture
          -%}

          {%- comment -%} Filter Panel Overlay {%- endcomment -%}
          <div class="filter-panel-overlay" data-filter-overlay></div>

          {%- comment -%} Filter Panel {%- endcomment -%}
          <div class="filter-panel" data-filter-panel>
            <div class="filter-panel__header">
              <h3 class="filter-panel__title">{{ 'products.general.filters' | t }}</h3>
              <button class="filter-panel__close" data-close-filters aria-label="{{ 'products.general.close' | t }}">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>

            <div class="filter-panel__content">
              <form data-collection-filters-form>
                {% if collection.current_type %}
                  <input type="hidden" name="q" value="{{ collection.current_type }}">
                {% endif %}
                {% if collection.current_vendor %}
                  <input type="hidden" name="q" value="{{ collection.current_vendor }}">
                {% endif %}

                {%- case filter_mode -%}
                  {%- when 'default' -%}
                    {%- if collection.filters != empty -%}
                      {%- assign filters_available = true -%}
                    {%- endif -%}

                    {%- for filter in collection.filters -%}
                      {%- assign filter_count = filter_count | plus: filter.active_values.size -%}
                      <div class="filter-group">
                        <button type="button" class="filter-group__title is-expanded" data-filter-toggle>
                          {{ filter.label }}
                          <span class="toggle-icon">
                            <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
                              <path d="M2 4l4 4 4-4" stroke="currentColor" stroke-width="1.5" fill="none"/>
                            </svg>
                          </span>
                        </button>
                        <div class="filter-group__content is-expanded">
                          <ul class="filter-options">
                            {%- case filter.type -%}
                              {%- when 'list' -%}
                                {%- for value in filter.values -%}
                                  <li class="filter-option{% if value.active %} is-active{% endif %}">
                                    <a href="{{ value.url_to_add }}" class="filter-option__link">
                                      {{ value.label }} ({{ value.count }})
                                    </a>
                                  </li>
                                {%- endfor -%}
                              {%- when 'price_range' -%}
                                <li class="filter-option">
                                  <div style="padding: 8px 12px;">
                                    <label>{{ 'products.general.price_range' | t }}</label>
                                    <div style="display: flex; gap: 8px; margin-top: 8px;">
                                      <input
                                        type="number"
                                        name="{{ filter.min_value.param_name }}"
                                        value="{{ filter.min_value.value | default: '' }}"
                                        placeholder="{{ filter.range_min | money_without_trailing_zeros }}"
                                        style="width: 100%; padding: 6px; border: 1px solid #ddd; border-radius: 4px;"
                                      >
                                      <span style="padding: 6px;">-</span>
                                      <input
                                        type="number"
                                        name="{{ filter.max_value.param_name }}"
                                        value="{{ filter.max_value.value | default: '' }}"
                                        placeholder="{{ filter.range_max | money_without_trailing_zeros }}"
                                        style="width: 100%; padding: 6px; border: 1px solid #ddd; border-radius: 4px;"
                                      >
                                    </div>
                                  </div>
                                </li>
                            {%- endcase -%}
                          </ul>
                        </div>
                      </div>
                    {%- endfor -%}

                  {%- when 'tag' -%}
                    {%- liquid
                      assign is_active = false
                      assign active_count = 0
                      assign tags_list = ''

                      for tag in collection.all_tags
                        assign filters_available = true
                        unless tag contains '_badge' or tag contains '_preorder'
                          if current_tags contains tag
                            assign is_active = true
                            assign active_count = active_count | plus: 1
                            assign all_active_tags_count = all_active_tags_count | plus: 1
                            assign filter_count = filter_count | plus: 1
                          endif
                        endunless
                      endfor
                    -%}

                    <div class="filter-group">
                      <button type="button" class="filter-group__title is-expanded" data-filter-toggle>
                        {{ 'products.general.filter_by' | t }}
                        <span class="toggle-icon">
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
                            <path d="M2 4l4 4 4-4" stroke="currentColor" stroke-width="1.5" fill="none"/>
                          </svg>
                        </span>
                      </button>
                      <div class="filter-group__content is-expanded">
                        <ul class="filter-options">
                          {%- for tag in collection.all_tags -%}
                            {%- unless tags_list contains tag or tag contains '_badge' or tag contains '_preorder' -%}
                              {%- capture temp_list -%}{{ tags_list | append: tag | append: ' ' }}{%- endcapture -%}
                              {%- liquid
                                assign tags_list = temp_list
                                assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle

                                if current_tags contains tag
                                  assign linked_tags = selected_tags | remove: current_tag_handle
                                else
                                  assign linked_tags = selected_tags | append: '+' | append: current_tag_handle
                                endif

                                capture tag_link
                                  echo collection.url
                                  if linked_tags != blank
                                    echo '/' | append: linked_tags
                                  endif
                                  echo sort_param
                                endcapture

                                assign tag_link = tag_link | replace: '/+', '/' | replace: '++', '+' | replace: '+?', '?'
                              -%}

                              <li class="filter-option{% if current_tags contains tag %} is-active{% endif %}">
                                <a href="{{ tag_link }}" class="filter-option__link">
                                  {{ tag }}
                                </a>
                              </li>
                            {%- endunless -%}
                          {%- endfor -%}
                        </ul>
                      </div>
                    </div>

                  {%- when 'group' -%}
                    {%- liquid
                      assign groups = ''

                      for tag in collection.all_tags
                        assign tag_parts = tag | split: '_'
                        if tag_parts.size == 2
                          assign groups = groups | append: tag_parts.first | append: ','
                        endif
                      endfor

                      assign groups = groups | split: ',' | compact | uniq
                      assign special_tags = '_preorder,_badge' | split: ','
                    -%}

                    {%- for group in groups -%}
                      {%- liquid
                        assign is_active = false
                        assign active_count = 0
                        assign group_label = group | downcase
                        assign group_with_suffix = group | append: '_'
                      -%}

                      {%- unless special_tags contains group_label or group_label == blank -%}
                        {%- liquid
                          assign filters_available = true
                          for tag in current_tags
                            if tag contains group_with_suffix
                              assign is_active = true
                              assign active_count = active_count | plus: 1
                              assign all_active_tags_count = all_active_tags_count | plus: 1
                              assign filter_count = filter_count | plus: 1
                            endif
                          endfor
                        -%}

                        <div class="filter-group">
                          <button type="button" class="filter-group__title is-expanded" data-filter-toggle>
                            {{ group -}}
                            {%- if active_count > 0 %} ({{ active_count }}){% endif %}
                            <span class="toggle-icon">
                              <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">
                                <path d="M2 4l4 4 4-4" stroke="currentColor" stroke-width="1.5" fill="none"/>
                              </svg>
                            </span>
                          </button>
                          <div class="filter-group__content is-expanded">
                            <ul class="filter-options">
                              {%- for tag in collection.all_tags -%}
                                {%- liquid
                                  assign tag_parts = tag | split: '_'
                                  assign group_tag = tag_parts.last
                                  assign current_tag_handle = tag | replace: '&#39;', '' | replace: '&#34;', '' | handle

                                  if current_tags contains tag
                                    assign linked_tags = selected_tags | remove: current_tag_handle
                                  else
                                    assign linked_tags = selected_tags | append: '+' | append: current_tag_handle
                                  endif

                                  capture tag_link
                                    echo collection.url
                                    if linked_tags != blank
                                      echo '/' | append: linked_tags
                                    endif
                                    echo sort_param
                                  endcapture

                                  assign tag_link = tag_link | replace: '/+', '/' | replace: '++', '+' | replace: '+?', '?'
                                -%}

                                {%- if tag_parts.first == group -%}
                                  <li class="filter-option{% if current_tags contains tag %} is-active{% endif %}">
                                    <a href="{{ tag_link }}" class="filter-option__link">
                                      {{ group_tag }}
                                    </a>
                                  </li>
                                {%- endif -%}
                              {%- endfor -%}
                            </ul>
                          </div>
                        </div>
                      {%- endunless -%}
                    {%- endfor -%}
                {%- endcase -%}

                {%- if filter_count > 0 -%}
                  <div class="clear-filters">
                    <a href="{{ collection.url }}{{ sort_param }}" class="clear-filters__btn">
                      {{ 'products.general.clear_filters' | t }}
                    </a>
                  </div>
                {%- endif -%}
              </form>
            </div>
          </div>
        {%- endif -%}

        {%- paginate collection.products by pagination_limit -%}
          <div
            class="collection__products collection-items--{{ columns }} collection-items--{{ size_mobile }}"
            data-collection-products
          >
            {%- if collection_count > 0 -%}
              {%- if collection.products_count > 0 -%}
                <div
                  class="grid"
                  {% if enable_infinity_scroll %}
                    id="AjaxinateLoop" data-ajaxinate-id="{{ section.id }}"
                  {% endif %}
                >
                  {%- assign tablet_counter = 1 -%}
                  {%- assign mobile_counter = 1 -%}

                  {%- for product in collection.products -%}
                    {%- assign animation_delay = forloop.index0 | modulo: columns | times: 1 -%}
                    {%- render 'product-grid-item',
                      product: product,
                      animation_delay: animation_delay,
                      tablet_counter: tablet_counter,
                      mobile_counter: mobile_counter,
                      item_index: forloop.index0
                    -%}
                    {%- assign tablet_counter = tablet_counter | plus: 1 -%}
                    {%- assign mobile_counter = mobile_counter | plus: 1 -%}
                  {%- endfor -%}
                </div>
              {%- else -%}
                <div class="collection--no-results">
                  <p class="no-matches">
                    {{ 'collections.general.no_matches_by_filter' | t: products_count: collection.products_count }}
                  </p>
                </div>
              {%- endif -%}

            {%- elsif collection.handle != 'all' and collection_count == 0 -%}
              <div class="collection--no-results">
                <p class="no-matches">{{ 'collections.general.no_matches' | t }}</p>
                <a href="{{ routes.root_url }}" class="btn btn--primary btn--solid">
                  {{- 'general.404.button_text' | t -}}
                </a>
              </div>
            {%- endif -%}

            {%- if enable_infinity_scroll -%}
              <div
                class="pagination pagination--infinite"
                id="AjaxinatePagination"
                data-ajaxinate-id="{{ section.id }}"
              >
                {%- if paginate.next -%}
                  <div class="pagination__loading">
                    <a href="{{ paginate.next.url }}">
                      <span class="visually-hidden">{{ 'general.pagination.next' | t }}</span>
                    </a>
                  </div>
                {%- endif -%}
              </div>

              {%- if paginate.pages > 1 -%}
                <noscript>
                  {%- render 'pagination', paginate: paginate -%}
                </noscript>
              {%- endif -%}

            {%- else -%}
              {%- if paginate.pages > 1 -%}
                {%- render 'pagination', paginate: paginate -%}
              {%- endif -%}
            {%- endif -%}
          </div>
        {%- endpaginate -%}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Filter panel elements
    const openFiltersBtn = document.querySelector('[data-open-filters]');
    const closeFiltersBtn = document.querySelector('[data-close-filters]');
    const filterPanel = document.querySelector('[data-filter-panel]');
    const filterOverlay = document.querySelector('[data-filter-overlay]');
    const body = document.body;

    // Open filter panel
    if (openFiltersBtn) {
      openFiltersBtn.addEventListener('click', function() {
        openFilterPanel();
      });
    }

    // Close filter panel
    if (closeFiltersBtn) {
      closeFiltersBtn.addEventListener('click', function() {
        closeFilterPanel();
      });
    }

    // Close on overlay click
    if (filterOverlay) {
      filterOverlay.addEventListener('click', function() {
        closeFilterPanel();
      });
    }

    // Close on Escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && filterPanel && filterPanel.classList.contains('is-open')) {
        closeFilterPanel();
      }
    });

    // Function to open filter panel
    function openFilterPanel() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.add('is-open');
        filterOverlay.classList.add('is-open');
        body.classList.add('filter-panel-open');

        // Focus management for accessibility
        const firstFocusable = filterPanel.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        if (firstFocusable) {
          firstFocusable.focus();
        }
      }
    }

    // Function to close filter panel
    function closeFilterPanel() {
      if (filterPanel && filterOverlay) {
        filterPanel.classList.remove('is-open');
        filterOverlay.classList.remove('is-open');
        body.classList.remove('filter-panel-open');

        // Return focus to trigger button
        if (openFiltersBtn) {
          openFiltersBtn.focus();
        }
      }
    }

    // Filter group toggle functionality
    const filterToggles = document.querySelectorAll('[data-filter-toggle]');

    filterToggles.forEach(toggle => {
      toggle.addEventListener('click', function() {
        const content = this.nextElementSibling;
        const isExpanded = this.classList.contains('is-expanded');

        // Toggle classes
        this.classList.toggle('is-expanded');
        content.classList.toggle('is-expanded');

        // Update aria-expanded
        this.setAttribute('aria-expanded', !isExpanded);

        // Handle max-height for smooth animation
        if (!isExpanded) {
          content.style.maxHeight = content.scrollHeight + 'px';
        } else {
          content.style.maxHeight = '0px';
        }
      });
    });

    // Handle form submission for price range filters
    const filterForm = document.querySelector('[data-collection-filters-form]');
    if (filterForm) {
      const priceInputs = filterForm.querySelectorAll('input[type="number"]');

      priceInputs.forEach(input => {
        input.addEventListener('change', function() {
          // Auto-submit form when price range changes
          const url = new URL(window.location);
          url.searchParams.set(this.name, this.value);
          if (!this.value) {
            url.searchParams.delete(this.name);
          }
          window.location.href = url.toString();
        });
      });
    }
  });
</script>

{% schema %}
{
  "name": "Collection pages",
  "class": "collection-section",
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "show_breadcrumbs",
      "label": "Show breadcrumbs",
      "default": true
    },
    {
      "type": "header",
      "content": "Filters and sorting"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "label": "Enable sorting",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_filters",
      "label": "Enable filters",
      "default": true
    },
    {
      "type": "select",
      "label": "Default filter layout",
      "id": "filters_layout",
      "info": "Desktop only",
      "default": "open",
      "options": [
        { "label": "All filters open", "value": "open" },
        { "label": "All filters closed", "value": "closed" },
        { "label": "First filter open", "value": "first-open" }
      ]
    },
    {
      "type": "checkbox",
      "id": "show_more",
      "label": "Show a subset of filters from each group",
      "info": "Check this setting if you have a large number of filters, and want them to take up less space",
      "default": true
    },
    {
      "type": "select",
      "label": "Filter mode",
      "id": "filter_mode",
      "info": "Filters by group requires specific tag formatting. [Learn more](https://presidiocreative.com/link/palo-alto/docs/collection-filtering)",
      "default": "default",
      "options": [
        { "label": "Default (Faceted)", "value": "default" },
        { "label": "By tag", "value": "tag" },
        { "label": "By group", "value": "group" }
      ]
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background"
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding top",
      "default": 30
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Padding bottom",
      "default": 60
    }
  ],
  "blocks": [
    {
      "type": "promo",
      "name": "Promo",
      "limit": 5,
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection",
          "info": "Show on specific collection only"
        },
        {
        "type": "image_picker",
        "id": "image",
        "label": "Image"
        },
        {
          "type": "header",
          "content": "Layout"
        },
        {
          "type": "range",
          "id": "position",
          "label": "Show in position",
          "min": 1,
          "max": 48,
          "step": 1,
          "default": 1
        },
        {
          "type": "select",
          "id": "width",
          "label": "Width",
          "default": "auto",
          "options": [
            { "value": "full", "label": "Full width" },
            { "value": "half", "label": "2 grid items" },
            { "value": "auto", "label": "Grid item" }
          ]
        },
        {
          "type": "header",
          "content": "Text"
        },
        {
          "type": "richtext",
          "id": "title",
          "label": "Heading",
          "default": "<p>Promotion title</p>",
          "info": "Highlight one or two key words in your heading by italicizing them, then choose the highlight option below"
        },
        {
          "type": "header",
          "content": "Highlight"
        },
        {
          "type": "select",
          "id": "heading_highlight_type",
          "label": "Type",
          "default": "circle",
          "options": [
            { "value": "italics", "label": "Italics (no decoration)" },
            { "value": "highlight", "label": "Highlight" },
            { "value": "highlight-color", "label": "Text color" },
            { "value": "underline", "label": "Underline" },
            { "value": "squiggle", "label": "Squiggle" },
            { "value": "circle", "label": "Circle" },
            { "value": "stroke", "label": "Stroke (outlined text)" }
          ]
        },
        {
          "type": "color",
          "id": "highlight_color",
          "label": "Highlight color",
          "default": "#D43747"
        },
        {
          "type": "color",
          "id": "highlight_text_color",
          "label": "Text color",
          "default": "#FFFFFF"
        },
        {
          "type": "range",
          "id": "heading_size",
          "label": "Heading size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 10,
          "unit": "%"
        },
        {
          "type": "textarea",
          "id": "content",
          "label": "Text",
          "default": "Advertise a promotion or a sale"
        },
        {
          "type": "range",
          "id": "text_size",
          "label": "Text size",
          "default": 100,
          "min": 100,
          "max": 200,
          "step": 5,
          "unit": "%"
        },
        {
          "type": "select",
          "id": "text_color",
          "label": "Text color",
          "default": "text-light",
          "options": [
            {
              "value": "text-light",
              "label": "Light"
            },
            {
              "value": "text-dark",
              "label": "Dark"
            }
          ]
        },
        {
          "type": "select",
          "id": "text_position",
          "label": "Content position",
          "default": "bottom-left",
          "options": [
            { "value": "left", "label": "Left" },
            { "value": "center", "label": "Center" },
            { "value": "right", "label": "Right" },
            { "value": "bottom-left", "label": "Bottom left" },
            { "value": "bottom-right", "label": "Bottom right" },
            { "value": "top-left", "label": "Top left" },
            { "value": "top-right", "label": "Top right" }
          ]
        },
        {
          "type": "select",
          "id": "layout",
          "label": "Content layout",
          "default": "stacked",
          "options": [
            { "label": "Inline", "value": "inline" },
            { "label": "Stacked", "value": "stacked" }
          ],
          "info": "The 'Inline' option only applies on desktop when the promo width is 'Full width'"
        },
        {
          "type": "range",
          "id": "overlay_opacity",
          "label": "Text contrast",
          "info": "Improves readability of text",
          "min": 0,
          "max": 95,
          "step": 5,
          "unit": "%",
          "default": 10
        },
        {
          "type": "color",
          "id": "bg_color",
          "label": "Background color",
          "default": "#D3D3D3",
          "info": "Applies if no image is chosen"
        },
        {
          "type": "header",
          "content": "Button"
        },
        {
          "type": "text",
          "id": "button_text",
          "label": "Button text",
          "info": "Leave blank to link entire image"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button URL"
        },
        {
          "type": "select",
          "id": "button_color",
          "label": "Button color",
          "default": "btn--white",
          "options": [
            { "label": "Primary", "value": "btn--primary" },
            { "label": "Secondary", "value": "btn--secondary" },
            { "label": "White", "value": "btn--white" },
            { "label": "Black", "value": "btn--black" }
          ]
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "Button style",
          "default": "btn--solid-border",
          "options": [
            { "label": "Solid", "value": "btn--solid" },
            { "label": "Outline", "value": "btn--outline" },
            { "label": "Solid with border", "value": "btn--solid-border" },
            { "label": "Text", "value": "btn--text" }
          ]
        },
        {
          "type": "select",
          "id": "button_size",
          "label": "Size",
          "default": "btn--small",
          "options": [
            { "label": "Large", "value": "btn--large" },
            { "label": "Medium", "value": "btn--medium" },
            { "label": "Small", "value": "btn--small" }
          ]
        }
      ]
    }
  ]
}
{% endschema %}
